# =====[ Plugins ]=====
require-module connect

## Initialize Plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"

## fzf
plug "cakekindel/fzf.kak" branch "master" config %{} defer "fzf" %{
  # set global fzf_terminal_command 'kitty kak -c %val{session} -e "%arg{@}"'
} defer "fzf-grep" %{
  set global fzf_grep_include_filename true
}

map global user f ': fzf-mode<ret>' \
    -docstring "search using fzf"

plug "raiguard/one.kak" theme

plug "andreyorst/powerline.kak" defer powerline %{
  powerline-theme default
  powerline-format global 'lsp git bufname line_column mode_info filetype position'
} config %{
  powerline-start
}

## Language Server
eval %sh{kak-lsp --kakoune -s ${kak_session}}

lsp-enable
lsp-inlay-hints-enable global

### Use tab to cycle through suggestions
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft "h<a-K>\h<ret>"
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}

### Undo mappings from above when suggestions go away
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# =====[ Visual ]=====
colorscheme default

## Faces
# 
# face global keyword magenta,default
# face global value magenta,default
# face global meta blue,default
# face global function default,default
# face global attribute blue,default
# face global string yellow,default
# 
# face global documentation default,default+d
# face global comment cyan,default+d
# 
# # render whitespace same as Line Numbers, but dimmer
# face global Whitespace +d@LineNumbers
# 
# # High contrast selection colors
# face global PrimarySelection black,blue+Ffg
# face global SecondarySelection black,white+Ffg
# 
# # High contrast menu colors
face global MenuForeground black,blue+Ffg
face global MenuBackground black,white+Ffg

## Assistant
set-option global ui_options "terminal_assistant=clippy"

## Relative line numbers
add-highlighter global/ number-lines -relative -hlcursor -min-digits 3

## Render matching braces as "MatchingChar" face 
add-highlighter global/ show-matching

## Render whitespace
add-highlighter global/ show-whitespaces

# =====[ Key Bindings ]=====
## --- User Mode ---

map global user o ":e %%sh{echo `realpath -m $kak_buffile/../$kak_selection`}<ret>" -docstring "open selection as file in current dir"
map global user y "<a-|>xsel -b<ret>" -docstring "yank current selection to system clipboard"
map global user h ":lsp-hover<ret>" -docstring "trigger language server hover"
map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP"

map global user . "iâˆ˜<esc>" \
    -docstring "trim + wrap current selection with angles"

map global user < "_i<lt><esc>a<gt><esc>m" \
    -docstring "trim + wrap current selection with angles"

map global user ( "_i(<esc>a)<esc>m" \
    -docstring "trim + wrap current selection with parens"

map global user / "/(?i)" \
    -docstring "case insensitive search"

map global user r ":enter-user-mode rust<ret>" \
    -docstring "ðŸ¦€"

map global user g ":enter-user-mode git<ret>" \
    -docstring "git"

map global user q ":enter-user-mode qwick<ret>" \
    -docstring "qwick"

map global user p ":enter-user-mode purescript<ret>" \
    -docstring "purescript"

### Git
declare-user-mode git
declare-user-mode git-three-way
# map global git 3 ":enter-user-mode git-three-way<ret>" -docstring "3-way merge conflict"

map global git n "/<lt>{7} HEAD.*?<gt>{7}.*?\n<ret>" -docstring "next conflict"
map global git <a-h> "s<lt>{7} HEAD\n|\|{7}.*?<gt>{7}.*?\n<ret>d<space>" -docstring "from selection, take changes from HEAD, discard others"
map global git <a-u> "s<lt>{7} HEAD.*?={7}|<gt>{7}.*?\n<ret>d<space>" -docstring "from selection, changes from upstream, discard others"
map global git h ",gn,g<a-h>" -docstring "from next conflict, take changes from HEAD, discard others"
map global git u ",gn,g<a-u>" -docstring "from next conflict, changes from upstream, discard others"
map global git H "%%,g<a-h>" -docstring "take all changes from HEAD, discard others"
map global git U "%%,g<a-u>" -docstring "take all changes from upstream, discard others"

### Markdown Mode
declare-user-mode markdown
map global markdown l "i[<esc>a ðŸ”—]<esc>m<a-:>" \
    -docstring "surround current selection with markdown-style link + link emoji"

### Rust Mode
declare-user-mode rust

map global rust R ",<lt>iResult<esc>wa, Error<esc>;b<a-:>" \
    -docstring "Result<___>"
map global rust o ",(iOk<esc>B<a-:>" \
    -docstring "Ok(___)"
map global rust e ",(iErr<esc>B<a-:>" \
    -docstring "Err(___)"

map global rust O ",<lt>iOption<esc>B<a-:>" \
    -docstring "Option<___>"

map global rust s ",(iSome<esc>B<a-:>" \
    -docstring "Some(___)"
map global rust n ",(iNone<esc>B<a-:>" \
    -docstring "None(___)"

map global rust o ",(iOk<esc>B<a-:>" \
    -docstring "Ok(___)"

### Qwick Mode
declare-user-mode qwick
map global qwick s "<a-!>xargs -0 -I%% psql 'postgresql://qwick_owner:1234@localhost:5433/qwick_dev_local' --pset=pager=off -x -c %% 2>&1<ret>" \
    -docstring "Run selection as psql query"

### Purescript Mode
declare-user-mode purescript

map global purescript m "imodule ___ where<ret><ret>import Prelude<esc><a-/>___<ret>" \
    -docstring "New Module"

map global purescript a "%%s\bforall\b<ret>câˆ€<esc><space>" \
    -docstring "replace all foralls with unicode char (âˆ€)"

hook global BufCreate .*\.re %{
  set-option buffer filetype ocaml
  set-option buffer formatcmd refmt
}

## "SmartTab"
# plug "andreyorst/smarttab.kak" do %{
#   set-option global softtabstop 4 # tab = 4 spaces
#   hook global WinSetOption .* expandtab
# }
