# =====[ Plugins ]=====
## Initialize Plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"

## fzf
plug "andreyorst/fzf.kak"
map global user f ': fzf-mode<ret>' \
    -docstring "search using fzf"

## Language Server
eval %sh{kak-lsp --kakoune -s ${kak_session}}
lsp-enable

lsp auto-signature-help-disable

### Use tab to cycle through suggestions
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft "h<a-K>\h<ret>"
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}

### Undo mappings from above when suggestions go away
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# =====[ Visual ]=====
## Faces

# render whitespace same as Line Numbers, but dimmer
face global Whitespace +d@LineNumbers

# High contrast selection colors
face global PrimarySelection black,blue+Ffg
face global SecondarySelection black,white+Ffg

# High contrast menu colors
face global MenuForeground black,blue+Ffg
face global MenuBackground black,white+Ffg

## Assistant
#set-option global ui_options "ncurses_assistant=cat"

## Relative line numbers
add-highlighter global/ number-lines -relative -hlcursor -min-digits 3

## Render matching braces as "MatchingChar" face 
add-highlighter global/ show-matching

## Render whitespace
add-highlighter global/ show-whitespaces

# =====[ Key Bindings ]=====
## --- User Mode ---
map global user y "<a-|>xclip -i -selection clipboard<ret>" -docstring "yank current selection to system clipboard"
map global user h ":lsp-hover<ret>" -docstring "trigger language server hover"

map global user < "_i<lt><esc>a<gt><esc>m" \
    -docstring "trim + wrap current selection with angles"

map global user ( "_i(<esc>a)<esc>m" \
    -docstring "trim + wrap current selection with parens"

map global user r ":enter-user-mode rust<ret>" \
    -docstring "ðŸ¦€"

### Markdown Mode
declare-user-mode markdown
map global markdown l "i[<esc>a ðŸ”—]<esc>m<a-:>" \
    -docstring "surround current selection with markdown-style link + link emoji"

### Rust Mode
declare-user-mode rust

map global rust R ",<lt>iResult<esc>wa, Error<esc>;b<a-:>" \
    -docstring "Result<___>"
map global rust o ",(iOk<esc>B<a-:>" \
    -docstring "Ok(___)"
map global rust e ",(iErr<esc>B<a-:>" \
    -docstring "Err(___)"

map global rust O ",<lt>iOption<esc>B<a-:>" \
    -docstring "Option<___>"

map global rust s ",(iSome<esc>B<a-:>" \
    -docstring "Some(___)"
map global rust n ",(iNone<esc>B<a-:>" \
    -docstring "None(___)"


## --- Insert Mode ---
### Use j-k to exit
hook global InsertChar k %{ try %{
  exec -draft hH <a-k>jk<ret> d
  exec <esc>
}}

## "SmartTab"
plug "andreyorst/smarttab.kak"

### Tab behavior
hook global ModuleLoaded smarttab %{
    set-option global softtabstop 4 # tab = 4 spaces
}

# always use spaces
hook global WinSetOption .* expandtab
